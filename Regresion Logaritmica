pipeline masterclass
# Data Preprocessing y Reg

# Imporando las librerias
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importando el dataset
dataset = pd.read_csv('Data.csv', delimiter = ';')

#Declarando X e y
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 3].values

#Exploracion de datos
dataset.head()
print("Missings in the data:")
display(dataset.isnull().sum())

#estadisticas descriptivas
df = pd.DataFrame(dataset.iloc[:, 1:3])

df.describe()


#Histogramas
dataset['Age'].plot.hist(title="AGE",bins=10)
dataset['Salary'].plot.hist(title="SALARY",bins=10)

# Arreglando la data vacia
from sklearn.impute import SimpleImputer

imp = SimpleImputer(missing_values = np.nan, strategy = 'mean')
imp.fit(X[:,1:2])
X[:, 1:2] = imp.transform(X[:, 1:2])

imp2 = SimpleImputer(missing_values = np.nan, strategy = 'median')
imp2.fit(X[:,2:3])
X[:, 2:3] = imp2.transform(X[:, 2:3])

#df = pd.DataFrame(X[:, 1:3])

#df.describe()

# Variables categoricas

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from numpy import asarray, array
cat = (X[:,0]).astype(str)
cat = cat.reshape(-1,1)
encoder = OneHotEncoder(sparse=False)
Xcat = encoder.fit_transform(cat)

from numpy import concatenate, delete
X = concatenate((Xcat,X),axis=1)
print(X)
X = delete(X,3,1)



# Encoding the Dependent Variable
labelencoder_y = LabelEncoder()
y = labelencoder_y.fit_transform(y)

#ver caso de comando get_dummies
#y= pd.get_dummies(y, columns=["0"]).head()


#usando seaborn para graficar
import seaborn as sns

sns.scatterplot(data=dataset, x="Age", y="Salary")


df2= concatenate((X,y),axis=1)
print(df2)

sns.lmplot(x="Age", y="Salary", data=dataset)

# Dividiendo en Training set y Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling para Estandarizar
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)
#sc_y = StandardScaler()
#y_train = sc_y.fit_transform([y_train])

# Fitting Logistic Regression to the Training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)



